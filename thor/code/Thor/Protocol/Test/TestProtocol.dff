package Thor.Test;

enum TestEnum
{
	val1,
	val2,
	val3
}

struct TestStruct
{
	int32 i;
	float f;
	list<int32> l;
}

entity TestEntity2
{
	ref<TestEntity> refTest;
	weak_ref<TestEntity> weakrefTest;
}

entity TestEntity
{
	map<cstring, cstring> mapTest;
	TestStruct structTest;
	TestEnum enumTest;
	int8 i8;
	int16 i16;
	int32 i32;
	int64 i64;
	bool b;
	float f;
	double d;
	real r;
	TestEnum te;
	string wstr;
	cstring cstr;
	vec2f v2f;
	vec2d v2d;
	vec2 v2;
	vec3f v3f;
	vec3d v3d;
	vec3 v3;
	vec4f v4f;
	vec4d v4d;
	vec4 v4;
	quat q;
	quatf qf;
	quatd qd;
	mat2x2 m2x2;
	mat2x2f m2x2f;
	mat2x2d m2x2d;
	mat3x3 m3x3;
	mat3x3f m3x3f;
	mat3x3d m3x3d;
	mat4x4 m4x4;
	mat4x4f m4x4f;
	mat4x4d m4x4d;
}